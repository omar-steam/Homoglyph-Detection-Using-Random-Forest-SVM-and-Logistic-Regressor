# -*- coding: utf-8 -*-
"""rfhologyph.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18cQBTn4iI50_IM7HBzo4JqW70xC_WJyv
"""

# Install the confusables package (parses Unicode confusable characters)
!pip install confusables

import random
import numpy as np
import pandas as pd

from confusables import confusable_characters

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

# Example word list (expand with dictionary, domains, etc.)
words = ["password", "secure", "exchange", "login", "facebook", "microsoft", "apple", "orange"]

data, labels = [], []

for w in words:
    # Clean sample
    data.append(w)
    labels.append(0)

    # Homoglyph substitution
    noisy = list(w)
    replaced = False
    for i, ch in enumerate(noisy):
        homoglyphs = confusable_characters(ch)
        if homoglyphs and random.random() < 0.5:  # 50% chance to replace
            noisy[i] = random.choice(homoglyphs)
            replaced = True

    noisy_word = "".join(noisy)
    if replaced and noisy_word != w:
        data.append(noisy_word)
        labels.append(1)

print("Sample dataset:")
for d, l in zip(data[:10], labels[:10]):
    print(d, "->", l)

# Use character-level n-grams
vectorizer = CountVectorizer(analyzer="char", ngram_range=(1,2))
X = vectorizer.fit_transform(data)
y = np.array(labels)

print("Feature matrix shape:", X.shape)

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, stratify=y, random_state=42
)

print("Train size:", X_train.shape[0])
print("Test size:", X_test.shape[0])

models = {
    "Logistic Regression": LogisticRegression(max_iter=1000, C=1.0),
    "SVM": SVC(kernel="linear", probability=True),
    "Random Forest": RandomForestClassifier(n_estimators=100, max_depth=5, random_state=42),
}

cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

for name, model in models.items():
    scores = cross_val_score(model, X_train, y_train, cv=cv)
    print(f"{name} CV Accuracy: {scores.mean():.3f} ± {scores.std():.3f}")

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    print("="*40)
    print(f"{name} Test Performance")
    print(classification_report(y_test, y_pred))

test_samples = [
    "secure",       # clean
    "ѕесurе",       # homoglyphs (Cyrillic)
    "password",     # clean
    "раsswоrd",     # homoglyphs
]

X_new = vectorizer.transform(test_samples)
preds = models["Logistic Regression"].predict(X_new)

for s, p in zip(test_samples, preds):
    print(s, "->", "Homoglyph" if p == 1 else "Clean")